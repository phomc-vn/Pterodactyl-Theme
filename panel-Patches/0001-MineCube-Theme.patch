From 95cd051aa34f77db3d19445fcc2a6576848be216 Mon Sep 17 00:00:00 2001
From: typical <typical@phomc.vn>
Date: Mon, 19 Feb 2024 09:43:36 +0700
Subject: [PATCH] MineCube-Theme


diff --git a/public/themes/pterodactyl/pterodactyl.css b/public/themes/pterodactyl/pterodactyl.css
new file mode 100644
index 000000000..3562b475a
--- /dev/null
+++ b/public/themes/pterodactyl/pterodactyl.css
@@ -0,0 +1,854 @@
+/**
+ * Pterodactyl - Panel
+ * Copyright (c) 2015 - 2017 Dane Everitt <dane@daneeveritt.com>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+ @import 'checkbox.css';
+
+.login-page {
+    background: #10529f;
+}
+
+#login-position-elements {
+    margin: 25% auto;
+}
+
+.login-logo {
+    color: #fff;
+    font-weight: 400;
+}
+
+.login-copyright {
+    color: rgba(255, 255, 255, 0.3);
+}
+
+.login-copyright > a {
+    color: rgba(255, 255, 255, 0.6);
+}
+
+.particles-js-canvas-el {
+    position: absolute;
+    width: 100%;
+    height: 100%;
+    top: 0;
+    z-index: -1;
+}
+.iTERJN {
+    display: flex;
+    border-radius: 0.25rem;
+    text-decoration: none;
+    --tw-text-opacity: 1;
+    color: hsla(210,16%,82%,var(--tw-text-opacity));
+    -webkit-box-align: center;
+    align-items: center;
+    --tw-bg-opacity: 1;
+    background-color: #222339;
+    padding: 1rem;
+    border-width: 1px;
+    border-color: rgba(0, 0, 0, 0);
+    transition-property: background-color, border-color, color, fill, stroke;
+    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
+    transition-duration: 150ms;
+    overflow: hidden;
+}
+.pterodactyl-login-box {
+    background: rgba(0, 0, 0, 0.25);
+    border-radius: 3px;
+    padding: 20px;
+}
+
+.pterodactyl-login-input > input {
+    background: rgba(0, 0, 0, 0.4);
+    border: 1px solid #000;
+    border-radius: 2px;
+    color: #fff;
+}
+
+.pterodactyl-login-input > .form-control-feedback {
+    color: #fff;
+}
+
+.pterodactyl-login-button--main {
+    background: rgba(0, 0, 0, 0.4);
+    border: 1px solid #000;
+    border-radius: 2px;
+    color: #fff;
+}
+
+.pterodactyl-login-button--main:hover {
+    background: rgba(0, 0, 0, 0.7);
+    border: 1px solid #000;
+    border-radius: 2px;
+    color: #fff;
+}
+
+.pterodactyl-login-button--left {
+    background: rgba(255, 255, 255, 0.4);
+    border: 1px solid rgba(255, 255, 255, 0.6);
+    border-radius: 2px;
+    color: #fff;
+}
+
+.pterodactyl-login-button--left:hover {
+    background: rgba(255, 255, 255, 0.6);
+    border: 1px solid rgba(255, 255, 255, 0.8);
+    border-radius: 2px;
+    color: #fff;
+}
+
+.weight-100 {
+    font-weight: 100;
+}
+
+.weight-300 {
+    font-weight: 300;
+}
+
+.btn-clear {
+    background: transparent;
+}
+
+.user-panel > .info {
+    position: relative;
+    left: 0;
+}
+
+code {
+    background-color: #eef1f6;
+    color: #596981;
+    border-radius: 2px;
+    padding-left: 4px;
+    padding-right: 4px;
+    line-height: 1.4;
+    font-size: 85%;
+    border: 1px solid rgba(0, 0, 0, .1);
+    display: inline-block;
+}
+
+p {
+    line-height: 1.6 !important;
+}
+
+p.small {
+    margin-top: 3px !important;
+}
+
+.control-sidebar-dark .control-sidebar-menu > li > a.active {
+    background: #05a4e3;
+}
+
+.callout-nomargin {
+    margin: 0;
+}
+
+.table {
+    font-size: 14px !important;
+}
+
+.table .min-size {
+    width:1px;
+    white-space: nowrap;
+}
+
+@media (max-width:767px) {
+    .box-header > .box-tools {
+        position: relative !important;
+        padding: 0px 10px 10px;
+    }
+}
+
+.middle, .align-middle {
+    vertical-align: middle !important;
+}
+
+#fileOptionMenu.dropdown-menu > li > a {
+    padding:3px 6px;
+}
+
+.hasFileHover {
+    border: 2px dashed #0087F7;
+    border-top: 0 !important;
+    border-radius: 5px;
+    margin: 0;
+    opacity: 0.5;
+}
+
+.hasFileHover * {
+    pointer-events: none !important;
+}
+
+td.has-progress {
+    padding: 0px !important;
+    border-top: 0px !important;
+}
+
+.progress.progress-table-bottom {
+    margin: 0 !important;
+    height:5px !important;
+    padding:0;
+    border:0;
+}
+
+.muted {
+    filter: alpha(opacity=20);
+    opacity: 0.2;
+}
+
+.muted-hover:hover {
+    filter: alpha(opacity=100);
+    opacity: 1;
+}
+
+.use-pointer {
+    cursor: pointer !important;
+}
+
+.input-loader {
+    display: none;
+    position:relative;
+    top: -25px;
+    float: right;
+    right: 5px;
+    color: #cccccc;
+    height: 0;
+}
+
+.box-header > .form-group {
+    margin-bottom: 0;
+}
+
+.box-header > .form-group > div > p.small {
+    margin: 0;
+}
+
+.no-margin {
+    margin: 0 !important;
+}
+
+li.select2-results__option--highlighted[aria-selected="false"] > .user-block > .username > a {
+    color: #fff;
+}
+
+li.select2-results__option--highlighted[aria-selected="false"] > .user-block > .description {
+    color: #eee;
+}
+
+.select2-selection.select2-selection--multiple {
+    min-height: 36px !important;
+}
+
+.select2-search--inline .select2-search__field:focus {
+    outline: none;
+    border: 0 !important;
+}
+
+.img-bordered-xs {
+    border: 1px solid #d2d6de;
+    padding: 1px;
+}
+
+span[aria-labelledby="select2-pUserId-container"] {
+    padding-left: 2px !important;
+}
+
+.box {
+    box-shadow: 0 0 0 1px rgba(89, 105, 128, .1), 0 1px 3px 0 rgba(89, 105, 128, .1), 0 1px 2px 0 rgba(0, 0, 0, .05) !important;
+}
+
+.alert-danger {
+    color: #ffffff !important;
+    background: #d64242 !important;
+    border: 1px solid #841d1d;
+}
+
+.alert-info {
+    color: #ffffff !important;
+    background: #408fec !important;
+    border: 1px solid #1055a5;
+}
+
+.alert-success {
+    color: #ffffff !important;
+    background: #51b060 !important;
+    border: 1px solid #2b5f33;
+}
+
+.alert-warning {
+    color: #ffffff !important;
+    background: #fa9636 !important;
+    border: 1px solid #b45b05;
+}
+
+.callout-slim a {
+    color: #555 !important;
+}
+
+.bg-purple {
+    background-color: #79589f !important;
+}
+
+.label-default {
+    background-color: #eef1f6 !important;
+}
+
+.callout.callout-info.callout-slim {
+    border: 1px solid #1055a5 !important;
+    border-left: 5px solid #1055a5 !important;
+    border-right: 5px solid #1055a5 !important;
+    color: #777 !important;
+    background: transparent !important;
+}
+
+.callout.callout-danger.callout-slim {
+    border: 1px solid #c23321 !important;
+    border-left: 5px solid #c23321 !important;
+    border-right: 5px solid #c23321 !important;
+    color: #777 !important;
+    background: transparent !important;
+}
+
+.callout.callout-warning.callout-slim {
+    border: 1px solid #c87f0a !important;
+    border-left: 5px solid #c87f0a !important;
+    border-right: 5px solid #c87f0a !important;
+    color: #777 !important;
+    background: transparent !important;
+}
+
+.callout.callout-success.callout-slim {
+    border: 1px solid #00733e !important;
+    border-left: 5px solid #00733e !important;
+    border-right: 5px solid #00733e !important;
+    color: #777 !important;
+    background: transparent !important;
+}
+
+.callout.callout-default.callout-slim {
+    border: 1px solid #eee !important;
+    border-left: 5px solid #eee !important;
+    border-right: 5px solid #eee !important;
+    color: #777 !important;
+    background: transparent !important;
+}
+
+.callout code {
+    background-color: #515f6cbb;
+    color: #c3c3c3;
+    border: 1px solid rgba(0, 0, 0, .25);
+}
+
+.tab-pane .box-footer {
+    margin: 0 -10px -10px;
+}
+
+.select2-container{ width: 100% !important; }
+
+.nav-tabs-custom > .nav-tabs > li:hover {
+    border-top-color:#3c8dbc;
+}
+
+.nav-tabs-custom > .nav-tabs > li.active.tab-danger, .nav-tabs-custom > .nav-tabs > li.tab-danger:hover {
+    border-top-color: #c23321;
+}
+
+.nav-tabs-custom > .nav-tabs > li.active.tab-success, .nav-tabs-custom > .nav-tabs > li.tab-success:hover {
+    border-top-color: #00733e;
+}
+
+.nav-tabs-custom > .nav-tabs > li.active.tab-info, .nav-tabs-custom > .nav-tabs > li.tab-info:hover {
+    border-top-color: #0097bc;
+}
+
+.nav-tabs-custom > .nav-tabs > li.active.tab-warning, .nav-tabs-custom > .nav-tabs > li.tab-warning:hover {
+    border-top-color: #c87f0a;
+}
+
+.nav-tabs-custom.nav-tabs-floating > .nav-tabs {
+    border-bottom: 0px !important;
+}
+
+.nav-tabs-custom.nav-tabs-floating > .nav-tabs > li {
+    margin-bottom: 0px !important;
+}
+
+.nav-tabs-custom.nav-tabs-floating > .nav-tabs > li:first-child.active,
+.nav-tabs-custom.nav-tabs-floating > .nav-tabs > li:first-child:hover {
+    border-radius: 3px 0 0 0;
+}
+
+.nav-tabs-custom.nav-tabs-floating > .nav-tabs > li:first-child.active > a {
+    border-radius: 0 0 0 3px;
+}
+
+.position-relative {
+    position: relative;
+}
+
+.no-pad-bottom {
+    padding-bottom: 0 !important;
+}
+
+.no-margin-bottom {
+    margin-bottom: 0 !important;
+}
+
+.btn-icon > i.fa {
+    line-height: 1.5;
+}
+
+.btn.active, .btn.active.focus {
+    background-color: #408fec;
+}
+
+.strong {
+    font-weight: bold !important;
+}
+
+.server-description > td {
+    padding-top: 0 !important;
+    border-top: 0 !important;
+}
+
+tr:hover + tr.server-description {
+    background-color: #f5f5f5 !important;
+}
+
+.login-corner-info {
+    position: absolute;
+    bottom: 5px;
+    right: 10px;
+    color: white;
+}
+
+input.form-autocomplete-stop[readonly] {
+    background: inherit;
+    cursor: text;
+}
+
+/* fix Google Recaptcha badge */
+.grecaptcha-badge {
+    bottom: 54px !important;
+    background: white;
+    box-shadow: none !important;
+}
+
+.dropdown-massactions {
+    min-width: 80px;
+}
+
+.select-all-files {
+    position: relative;
+    bottom: 1px;
+    margin-right: 7px !important;
+}
+
+.select-file {
+    position: relative;
+    bottom: 1px;
+    margin-right: 2px !important;
+}
+
+.select-folder {
+    position: relative;
+    bottom: 1px;
+    margin-right: 5px !important;
+}
+
+label.control-label > span {
+    font-size: 80%;
+    font-weight: 400;
+    font-style: italic;
+    color: #dd4b39;
+}
+
+label.control-label > span.field-required:before {
+    content: "required";
+    color: #dd4b39;
+}
+
+label.control-label > span.field-optional:before {
+    content: "optional";
+    color: #bbbbbb;
+}
+
+.pagination > li > a, .pagination > li > span {
+    padding: 3px 10px !important;
+}
+
+.logo-mini > img {
+    height: 42px;
+    width: auto;
+}
+
+.search01 {
+    width: 30%;
+}
+
+.number-info-box-content {
+    padding: 15px 10px 0;
+}
+
+
+/* *******
+
+  > Version v1.0
+
+******* */
+
+body {
+    color: #cad1d8;
+}
+
+.fixed .main-header {
+    box-shadow: 0 4px 8px 0 rgba(0,0,0,.12), 0 2px 4px 0 rgba(0,0,0,.08);
+}
+
+.skin-blue .wrapper, .skin-blue .main-sidebar, .skin-blue .left-side {
+    background-color: #222339;
+    box-shadow: 0 4px 8px 0 rgba(0,0,0,.12), 0 2px 4px 0 rgba(0,0,0,.08);
+}
+
+.skin-blue .main-header .logo {
+    background-color: #313352;
+    color: #9aa5b1;
+}
+
+.skin-blue .main-header .navbar .sidebar-toggle {
+    color: #9aa5b1;
+}
+
+.skin-blue .main-header .navbar .nav>li>a {
+    color: #9aa5b1;
+}
+
+.skin-blue .sidebar-menu>li.header {
+    color: #ffffff;
+    background: #1b1c2b;
+}
+
+.skin-blue .main-header .navbar {
+    background-color: #313352;
+}
+
+.skin-blue .main-header .navbar .sidebar-toggle:hover {
+    background-color: #313352;
+}
+
+.skin-blue .main-header .logo:hover {
+    background-color: #222339;
+}
+
+.main-footer {
+    background: #222339;
+    color: #9aa5b1;
+    border-top: 1px solid #222339;
+}
+
+.skin-blue .sidebar-menu>li.active>a {
+    border-left-color: #a3a9ff;
+    background: #313352;
+}
+
+.text-gray {
+    color: #ffffff !important;
+}
+
+.text-green {
+    color: #00a65a !important;
+}
+
+.text-muted {
+    color: #9aa5b1 !important;
+}
+
+.text-danger {
+    color: #ff1c00;
+}
+
+.content-wrapper {
+    background-color: #1b1c30;
+}
+
+.btn-success {
+    background-color: #189a1c;
+    border-color: #0f8513;
+}
+
+.btn.btn-green:hover {
+    background-color: #0f8513;
+    border-color: #0e7717;
+}
+
+.btn-primary {
+    background-color: #0967d3;
+    border-color: #0550b3;
+}
+
+.btn.btn-primary:hover {
+    background-color: #0550b3;
+    border-color: #0345a0;
+}
+
+.box {
+    box-shadow: 0 4px 8px 0 rgba(0,0,0,.12), 0 2px 4px 0 rgba(0,0,0,.08) !important;
+    background: #222339;
+    border-top: 3px solid #222339;
+}
+
+.box-header {
+
+    color: #cad1d8;
+    background: #222339;
+}
+
+.box-header.with-border {
+    border-bottom: 1px solid #222339;
+}
+
+.box.box-default {
+    border-top-color: #222339;
+}
+
+.box-footer {
+    border-top: 1px solid #4d5b69;
+    background-color: #222339;
+}
+.content-header>.breadcrumb>li>a {
+    color: #cad1d8;
+}
+
+.breadcrumb>.active {
+    color: #cad1d8;
+}
+
+.h1 .small, .h1 small, .h2 .small, .h2 small, .h3 .small, .h3 small, .h4 .small, .h4 small, .h5 .small, .h5 small, .h6 .small, .h6 small, h1 .small, h1 small, h2 .small, h2 small, h3 .small, h3 small, h4 .small, h4 small, h5 .small, h5 small, h6 .small, h6 small {
+    color: #cad1d8;
+}
+
+.table>thead>tr>th, .table>tbody>tr>th, .table>tfoot>tr>th, .table>thead>tr>td, .table>tbody>tr>td, .table>tfoot>tr>td {
+    border-top: 1px solid #222339;
+}
+
+.table>thead>tr>th {
+    border-bottom: 2px solid #4d5b69;
+}
+
+.table-hover>tbody>tr:hover {
+    background-color: #313352;
+}
+
+a {
+    color: #007eff;
+}
+
+.nav-tabs-custom {
+    background: #222339;
+}
+
+.nav-tabs-custom>.nav-tabs>li.active {
+    border-top-color: #099aa5;
+}
+
+.nav-tabs-custom>.nav-tabs>li.active>a {
+    border-top-color: transparent;
+    border-left-color: #313352;
+    border-right-color: #313352;
+    background: #313352;
+}
+
+.nav-tabs-custom>.nav-tabs>li>a {
+    color: #9aa5b1;
+}
+
+.nav-tabs-custom>.nav-tabs>li.active>a, .nav-tabs-custom>.nav-tabs>li.active:hover>a {
+    color: #ffffff;
+}
+
+input.form-control {
+    padding: .75rem;
+    background-color: #313352;
+    border-width: 1px;
+    border-color: #313352;
+    border-radius: .25rem;
+    color: #cad1d8;
+    box-shadow: none;
+    -webkit-transition: border .15s linear,box-shaodw .15s ease-in;
+    transition: border .15s linear,box-shaodw .15s ease-in;
+}
+
+textarea.form-control {
+    padding: .75rem;
+    background-color: #313352;
+    border-width: 1px;
+    border-color: #313352;
+    border-radius: .25rem;
+    color: #cad1d8;
+    box-shadow: none;
+    -webkit-transition: border .15s linear,box-shaodw .15s ease-in;
+    transition: border .15s linear,box-shaodw .15s ease-in;
+}
+
+.input-group .input-group-addon {
+    border-color: #313352;
+    background-color: #313352;
+    color: #cad1d8;
+}
+
+.select2-container--default .select2-selection--single, .select2-selection .select2-selection--single {
+    border: 1px solid #313352;
+}
+
+.select2-container--default .select2-selection--single {
+    background-color: #313352;
+}
+
+.select2-container--default .select2-selection--single .select2-selection__rendered {
+    color: #ffffff;
+}
+
+.select2-container--default .select2-selection--multiple {
+    background-color: #313352;
+}
+
+.select2-container--default .select2-selection--multiple {
+    border: 1px solid #313352;
+    border-radius: 0;
+}
+
+code {
+    background-color: #313352;
+    color: #c3c3c3;
+    border: 1px solid rgba(0, 0, 0, .25);
+}
+
+.btn-default {
+    background-color: #313352;
+    color: #cad1d8;
+    border-color: #313352;
+}
+
+.select2-results__option {
+    background-color: #b5bcc1;
+    color: #444f5e;
+}
+
+.select2-container--default .select2-results__option--highlighted[aria-selected] {
+    background-color: #3c8dbc;
+}
+
+.modal-body {
+    background: #ffffff;
+}
+
+.modal-header {
+    background: #222339;
+    border-bottom-color: #ffffff;
+}
+
+.modal-footer {
+    background: #222339;
+    border-top-color: #4d5b69;
+}
+
+@media (max-width: 991px) {
+    .content-header>.breadcrumb {
+        background: #222339 !important;
+    }
+}
+
+.nav-tabs-custom>.nav-tabs>li.active>a, .nav-tabs-custom>.nav-tabs>li.active:hover>a {
+     background-color: #313352;
+}
+
+.select2-container--default .select2-results__option[aria-selected=true], .select2-container--default .select2-results__option[aria-selected=true]:hover {
+    color: #fff;
+}
+
+.select2-dropdown {
+    background-color: #444f5e;
+    border: 1px solid #313352;
+}
+.select2-container--default.select2-container--focus .select2-selection--multiple, .select2-container--default .select2-search--dropdown .select2-search__field {
+    border-color: #d2d6de !important;
+    background-color: #444f5e;
+}
+
+.select2-container--default .select2-results__option--highlighted[aria-selected] {
+    background-color: #099aa5;
+}
+
+a {
+    color: #288afb;
+}
+
+a:hover {
+    color: #206ec7;
+}
+
+.form-control {
+    border-color: #313352;
+    background-color: #313352;
+    color: #cad1d8;
+}
+
+.form-control[disabled], .form-control[readonly],
+fieldset[disabled] .form-control {
+    background-color: #ffffff;
+    color: #cad1d8;
+    cursor: not-allowed;
+}
+
+.well {
+    min-height: 20px;
+    padding: 19px;
+    margin-bottom: 20px;
+    background-color: #515f6cbb;
+    border: 1px solid #5a7dff;
+}
+
+.well-lg {
+    padding: 24px;
+}
+
+.well-sm {
+    padding: 9px;
+}
+
+.small-box h3, .small-box p {
+    color: #c3c3c3;
+}
+
+.small-box-footer {
+    color: #288afb;
+}
+
+.small-box .icon {
+    color: #cad1d8;
+}
+
+.bg-gray {
+    background-color: #1b1c30 !important;
+}
+
+pre {
+    color: #cad1d8;
+    background-color: #515f6cbb;
+    border-color: #222339;
+}
diff --git a/resources/scripts/MineCube.css b/resources/scripts/MineCube.css
new file mode 100644
index 000000000..9250e6c27
--- /dev/null
+++ b/resources/scripts/MineCube.css
@@ -0,0 +1,270 @@
+:root {
+  --main-color: #222339;
+  --secundary-color: #222339;
+  --tertiary-color: #4686a8;
+  --bacground-url: url("https://media.discordapp.net/attachments/1132986922000728104/1134398257078997042/image.png");
+}
+
+html {
+  background-image: var(--bacground-url);
+  background-attachment: fixed;
+  background-repeat: no-repeat;
+  background-position: center center;
+  background-size: cover;
+  background-color: transparent;
+}
+
+a.GreyRowBox-sc-1xo9c6v-0.ServerRow__StatusIndicatorBox-sc-1ibsw91-2.dyLna-D.fRwFrz.DashboardContainer___StyledServerRow-sc-1topkxf-2 {
+  background-color: var(--main-color) !important;
+}
+
+a.GreyRowBox-sc-1xo9c6v-0.ServerRow__StatusIndicatorBox-sc-1ibsw91-2.dyLna-D.fwbDSe.DashboardContainer___StyledServerRow-sc-1topkxf-2.jbVWLN {
+  background-color: var(--main-color) !important;
+  background-size: cover;
+
+}
+
+div.SubNavigation-sc-lfuaoi-0 {
+  background-color: rgba(255, 255, 255, 0) !important;
+  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1) !important;
+
+}
+
+div.grid.grid-cols-6.gap-2.md:gap-4.col-span-4.lg:col-span-1.order-last.lg:order-none {
+  background-color: var(--main-color);
+}
+div.ServerRow___StyledP3-sc-1ibsw91-9 {
+   text-decoration-color: whitesmoke;
+}
+div.style-module_2Vp6MaXq.bg-gray-600.cursor-pointer {
+  background: rgba(0, 0, 0, 0);
+  border-radius: 16px;
+  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
+  backdrop-filter: blur(9.2px);
+  -webkit-backdrop-filter: blur(9.2px);
+}
+
+div.style-module_2Vp6MaXq.bg-gray-600 {
+  background: rgba(255, 255, 255, 0);
+  border-radius: 16px;
+  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
+  backdrop-filter: blur(9.2px);
+  -webkit-backdrop-filter: blur(9.2px);
+}
+
+div.style-module_2XbmHEcn.group {
+  background-color: var(--secundary-color);
+}
+
+div.w-full.bg-neutral-900.shadow-md.overflow-x-auto {
+  background-color: var(--main-color)
+}
+
+div.icon.mr-4 {
+  background-color: var(--secundary-color)
+}
+
+a.style-module_35MPv1CD.style-module_35MPv1CD.active {
+  background-color: var(--main-color);
+}
+
+
+.style-module_1WqkLT9X {
+  background-color: var(--main-color) !important;
+}
+
+.style-module_1WqkLT9X:hover {
+  background-color: var(--secundary-color) !important;
+}
+
+.style-module_35MPv1CD.active {
+  background-color: var(--main-color) !important;
+}
+
+.style-module_35MPv1CD.active:hover {
+  background-color: var(--secundary-color) !important;
+}
+
+div.GreyRowBox-sc-1xo9c6v-0.iTERJN.flex-wrap.md:flex-nowrap.mt-2 {
+  background-color: var(--secundary-color)
+}
+
+div.TitledGreyBox___StyledDiv3-sc-gvsoy-4.fKIIIQ {
+  background-color: var(--main-color);
+}
+
+input.Input-sc-19rce1w-0.jqTCDz.cursor-pointer {
+  background-color: var(--secundary-color);
+}
+
+input.Input-sc-19rce1w-0.jqTCDz {
+  background-color: var(--secundary-color);
+}
+
+div.grid.grid-cols-10.py-4.border-b-2.border-gray-800.last:rounded-b.last:border-0.group {
+  background-color: var(--secundary-color);
+}
+
+div.TitledGreyBox___StyledDiv2-sc-gvsoy-1.jRrWLs {
+  background-color: var(--secundary-color);
+}
+
+
+div.ContentBox___StyledDiv-sc-mjlt6f-2.iGOcRf {
+  background-color: var(--secundary-color);
+}
+
+div.Modal___StyledDiv2-sc-9vzni8-3.ekHIsr {
+  background-color: var(--secundary-color)
+}
+
+
+div.GreyRowBox-sc-1xo9c6v-0.DatabaseRow___StyledGreyRowBox-sc-1t67zwr-13.iTERJN.gkSIus {
+  background-color: var(--secundary-color);
+}
+
+div.EditScheduleModal___StyledDiv2-sc-wh9db9-4.fhEpAC {
+  background-color: var(--secundary-color);
+}
+
+div.EditScheduleModal___StyledDiv4-sc-wh9db9-6.jyDDEO {
+  background-color: var(--secundary-color);
+}
+
+div.EditScheduleModal___StyledDiv5-sc-wh9db9-7.ueIjC {
+  background-color: var(--secundary-color);
+}
+
+a.GreyRowBox-sc-1xo9c6v-0.ScheduleContainer___StyledGreyRowBox-sc-dlqnx9-2.dyLna-D.bppajE {
+  background-color: var(--secundary-color);
+}
+
+div.GreyRowBox-sc-1xo9c6v-0.UserRow___StyledGreyRowBox-sc-hg2wjz-0.dyLna-D.dmlaEn {
+  background-color: var(--secundary-color);
+}
+
+div.CreateBackupButton___StyledDiv2-sc-da8bqw-3.eDncUf {
+  background-color: var(--secundary-color);
+}
+
+textarea.Input__Textarea-sc-19rce1w-1.kKFWRA {
+  background-color: var(--secundary-color);
+}
+
+div.flex.justify-end.space-x-4.mt-4.w-full.md:mt-0.md:w-48 {
+  background-color: var(--secundary-color);
+}
+
+select.Select-sc-17exaqp-0.dupyoa {
+  background-color: var(--main-color);
+}
+
+div.TitledGreyBox___StyledDiv-sc-gvsoy-0.oLbNP.StartupContainer___StyledTitledGreyBox-sc-163imy2-1.kRunTE {
+  background-color: var(--secundary-color);
+}
+
+a.GreyRowBox-sc-1xo9c6v-0.ServerRow__StatusIndicatorBox-sc-1ibsw91-2.dyLna-D {
+  background-color: var(--main-color)
+}
+
+label.PermissionRow__Container-sc-1h899cn-0.icxFlO:hover {
+  background-color: var(--tertiary-color);
+}
+
+div.style-module_1DtraXMW.bg-gray-700 {
+  background-color: var(--main-color);
+}
+
+input.Input-sc-19rce1w-0.jqTCDz {
+  background-color: var(--secundary-color);
+}
+
+div.TitledGreyBox___StyledDiv-sc-gvsoy-0.oLbNP {
+  background-color: var(--main-color);
+}
+
+div.grid.grid-cols-10.py-4.border-b-2.border-gray-800.last:rounded-b.last:border-0.group {
+  background-color: var(--main-color);
+}
+
+.group {
+  background-color: var(--main-color);
+}
+
+.GreyRowBox-sc-1xo9c6v-0 {
+  background-color: var(--main-color);
+}
+
+#app {
+  background-image: var(--bacground-url);
+  background-attachment: fixed;
+  background-repeat: no-repeat;
+  background-position: center center;
+  background-size: cover;
+  background-color: transparent;
+}
+
+/*
+  Server Console style module
+*/
+
+div.server-console-style-module__stat_block {
+  background: rgba(255, 255, 255, 0);
+  border-radius: 16px;
+  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
+  backdrop-filter: blur(9.2px);
+  -webkit-backdrop-filter: blur(9.2px);
+}
+
+div.server-console-style-module__icon.bg-gray-700 {
+  background-color: var(--secundary-color);
+}
+
+button.style-module_4LBM1DKx {
+  /* From https://css.glass */
+  background: rgba(255, 255, 255, 0);
+  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
+  backdrop-filter: blur(8.6px);
+  -webkit-backdrop-filter: blur(8.6px);
+}
+
+div.server-console-style-module__chart_container {
+  background: rgba(255, 255, 255, 0);
+  border-radius: 16px;
+  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
+  backdrop-filter: blur(9.2px);
+  -webkit-backdrop-filter: blur(9.2px);
+}
+
+button.style-module_4LBM1DKx.style-module_3kBDV_wo.style-module_Yp7-2Fw-.flex-1:hover {
+  background-color: var(--main-color);
+}
+
+input.Input-sc-19rce1w-0.ZkNLd {
+  background-color: var(--main-color);
+}
+
+input.Input-sc-19rce1w-0.jqTCDz {
+  background-color: var(--secundary-color);
+  ;
+}
+
+body {
+  overflow: overlay;
+}
+
+Input {
+  background-color: var(--secundary-color) !important;
+}
+
+select {
+  background-color: var(--secundary-color) !important;
+}
+
+select {
+  background-color: var(--secundary-color) !important;
+}
+
+p.StartupContainer___StyledP-sc-163imy2-3.ekbHAG {
+   background-color: var(--secundary-color) !important;
+}
diff --git a/resources/scripts/components/auth/LoginContainer.tsx b/resources/scripts/components/auth/LoginContainer.tsx
index 0cb5aae16..299e38ff0 100644
--- a/resources/scripts/components/auth/LoginContainer.tsx
+++ b/resources/scripts/components/auth/LoginContainer.tsx
@@ -1,16 +1,14 @@
-import { useStoreState } from 'easy-peasy';
-import type { FormikHelpers } from 'formik';
-import { Formik } from 'formik';
-import { useEffect, useRef, useState } from 'react';
-import { Link, useNavigate } from 'react-router-dom';
-import Reaptcha from 'reaptcha';
-import tw from 'twin.macro';
-import { object, string } from 'yup';
-
+import React, { useEffect, useRef, useState } from 'react';
+import { Link, RouteComponentProps } from 'react-router-dom';
 import login from '@/api/auth/login';
 import LoginFormContainer from '@/components/auth/LoginFormContainer';
+import { useStoreState } from 'easy-peasy';
+import { Formik, FormikHelpers } from 'formik';
+import { object, string } from 'yup';
 import Field from '@/components/elements/Field';
+import tw from 'twin.macro';
 import Button from '@/components/elements/Button';
+import Reaptcha from 'reaptcha';
 import useFlash from '@/plugins/useFlash';
 
 interface Values {
@@ -18,14 +16,12 @@ interface Values {
     password: string;
 }
 
-function LoginContainer() {
+const LoginContainer = ({ history }: RouteComponentProps) => {
     const ref = useRef<Reaptcha>(null);
     const [token, setToken] = useState('');
 
     const { clearFlashes, clearAndAddHttpError } = useFlash();
-    const { enabled: recaptchaEnabled, siteKey } = useStoreState(state => state.settings.data!.recaptcha);
-
-    const navigate = useNavigate();
+    const { enabled: recaptchaEnabled, siteKey } = useStoreState((state) => state.settings.data!.recaptcha);
 
     useEffect(() => {
         clearFlashes();
@@ -37,7 +33,7 @@ function LoginContainer() {
         // If there is no token in the state yet, request the token and then abort this submit request
         // since it will be re-submitted when the recaptcha data is returned by the component.
         if (recaptchaEnabled && !token) {
-            ref.current!.execute().catch(error => {
+            ref.current!.execute().catch((error) => {
                 console.error(error);
 
                 setSubmitting(false);
@@ -48,16 +44,16 @@ function LoginContainer() {
         }
 
         login({ ...values, recaptchaData: token })
-            .then(response => {
+            .then((response) => {
                 if (response.complete) {
                     // @ts-expect-error this is valid
                     window.location = response.intended || '/';
                     return;
                 }
 
-                navigate('/auth/login/checkpoint', { state: { token: response.confirmationToken } });
+                history.replace('/auth/login/checkpoint', { token: response.confirmationToken });
             })
-            .catch(error => {
+            .catch((error) => {
                 console.error(error);
 
                 setToken('');
@@ -79,8 +75,10 @@ function LoginContainer() {
         >
             {({ isSubmitting, setSubmitting, submitForm }) => (
                 <LoginFormContainer title={'Login to Continue'} css={tw`w-full flex`}>
+                    <div css={tw`text-center text-white`}> 
                     <Field light type={'text'} label={'Username or Email'} name={'username'} disabled={isSubmitting} />
-                    <div css={tw`mt-6`}>
+                    </div>
+                    <div css={tw`mt-6 text-white text-center`}>
                         <Field light type={'password'} label={'Password'} name={'password'} disabled={isSubmitting} />
                     </div>
                     <div css={tw`mt-6`}>
@@ -93,7 +91,7 @@ function LoginContainer() {
                             ref={ref}
                             size={'invisible'}
                             sitekey={siteKey || '_invalid_key'}
-                            onVerify={response => {
+                            onVerify={(response) => {
                                 setToken(response);
                                 submitForm();
                             }}
@@ -115,6 +113,6 @@ function LoginContainer() {
             )}
         </Formik>
     );
-}
+};
 
 export default LoginContainer;
diff --git a/resources/scripts/components/auth/LoginFormContainer.tsx b/resources/scripts/components/auth/LoginFormContainer.tsx
index 17060572b..b325d9f63 100644
--- a/resources/scripts/components/auth/LoginFormContainer.tsx
+++ b/resources/scripts/components/auth/LoginFormContainer.tsx
@@ -1,55 +1,57 @@
-import { forwardRef } from 'react';
-import * as React from 'react';
+import React, { forwardRef } from 'react';
 import { Form } from 'formik';
-import styled from 'styled-components';
+import styled from 'styled-components/macro';
 import { breakpoint } from '@/theme';
 import FlashMessageRender from '@/components/FlashMessageRender';
 import tw from 'twin.macro';
 
 type Props = React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement> & {
     title?: string;
-};
+}
 
 const Container = styled.div`
     ${breakpoint('sm')`
         ${tw`w-4/5 mx-auto`}
     `};
-
     ${breakpoint('md')`
         ${tw`p-10`}
     `};
-
     ${breakpoint('lg')`
         ${tw`w-3/5`}
     `};
-
     ${breakpoint('xl')`
         ${tw`w-full`}
-        max-width: 700px;
+        max-width: 600px;
     `};
 `;
 
 export default forwardRef<HTMLFormElement, Props>(({ title, ...props }, ref) => (
     <Container>
-        {title && <h2 css={tw`text-3xl text-center text-neutral-100 font-medium py-4`}>{title}</h2>}
-        <FlashMessageRender css={tw`mb-2 px-1`} />
+        {title &&
+        <h2 css={tw`text-3xl text-center text-neutral-50 font-medium py-4`}>
+            {title}
+        </h2>
+        }
+        <FlashMessageRender css={tw`mb-2 px-1`}/>
         <Form {...props} ref={ref}>
-            <div css={tw`md:flex w-full bg-white shadow-lg rounded-lg p-6 md:pl-0 mx-1`}>
+            <div css={tw`md:flex w-full bg-transparent shadow-lg rounded-lg p-6 md:pl-0 mx-1`}>
                 <div css={tw`flex-none select-none mb-6 md:mb-0 self-center`}>
-                    <img src={'/assets/svgs/pterodactyl.svg'} css={tw`block w-48 md:w-64 mx-auto`} />
+                <div css={tw`block w-48 md:w-7 mx-auto`}/>
+                </div>
+                <div css={tw`flex-1`}>
+                    {props.children}
                 </div>
-                <div css={tw`flex-1`}>{props.children}</div>
             </div>
         </Form>
-        <p css={tw`text-center text-neutral-500 text-xs mt-4`}>
-            &copy; 2015 - {new Date().getFullYear()}&nbsp;
+        <p css={tw`text-center text-neutral-50 text-xs mt-4`}>
+            &copy; Pterodactyl API - {(new Date()).getFullYear()}&nbsp;
             <a
                 rel={'noopener nofollow noreferrer'}
                 href={'https://pterodactyl.io'}
                 target={'_blank'}
-                css={tw`no-underline text-neutral-500 hover:text-neutral-300`}
+                css={tw`no-underline text-neutral-50 hover:text-neutral-50`}
             >
-                Pterodactyl Software
+                MineCube Theme
             </a>
         </p>
     </Container>
diff --git a/resources/scripts/components/server/console/Console.tsx b/resources/scripts/components/server/console/Console.tsx
index 6ba9f840c..046edd4fc 100644
--- a/resources/scripts/components/server/console/Console.tsx
+++ b/resources/scripts/components/server/console/Console.tsx
@@ -1,245 +1,225 @@
-import { ChevronDoubleRightIcon } from '@heroicons/react/solid';
-import classNames from 'classnames';
-import { debounce } from 'debounce';
-import type { KeyboardEvent as ReactKeyboardEvent } from 'react';
-import { useEffect, useMemo, useRef, useState } from 'react';
-import type { ITerminalInitOnlyOptions, ITerminalOptions, ITheme } from 'xterm';
-import { Terminal } from 'xterm';
+import React, { useEffect, useMemo, useRef, useState } from 'react';
+import { ITerminalOptions, Terminal } from 'xterm';
 import { FitAddon } from 'xterm-addon-fit';
 import { SearchAddon } from 'xterm-addon-search';
 import { SearchBarAddon } from 'xterm-addon-search-bar';
 import { WebLinksAddon } from 'xterm-addon-web-links';
-import { theme as th } from 'twin.macro';
-
-import SpinnerOverlay from '@/components/elements/SpinnerOverlay';
-import { SocketEvent, SocketRequest } from '@/components/server/events';
 import { ScrollDownHelperAddon } from '@/plugins/XtermScrollDownHelperAddon';
-import useEventListener from '@/plugins/useEventListener';
+import SpinnerOverlay from '@/components/elements/SpinnerOverlay';
+import { ServerContext } from '@/state/server';
 import { usePermissions } from '@/plugins/usePermissions';
+import { theme as th } from 'twin.macro';
+import useEventListener from '@/plugins/useEventListener';
+import { debounce } from 'debounce';
 import { usePersistedState } from '@/plugins/usePersistedState';
-import { ServerContext } from '@/state/server';
+import { SocketEvent, SocketRequest } from '@/components/server/events';
+import classNames from 'classnames';
+import { ChevronDoubleRightIcon } from '@heroicons/react/solid';
 
 import 'xterm/css/xterm.css';
 import styles from './style.module.css';
 
-const theme: ITheme = {
-    background: th`colors.black`.toString(),
-    cursor: 'transparent',
-    black: th`colors.black`.toString(),
-    red: '#E54B4B',
-    green: '#9ECE58',
-    yellow: '#FAED70',
-    blue: '#396FE2',
-    magenta: '#BB80B3',
-    cyan: '#2DDAFD',
-    white: '#d0d0d0',
-    brightBlack: 'rgba(255, 255, 255, 0.2)',
-    brightRed: '#FF5370',
-    brightGreen: '#C3E88D',
-    brightYellow: '#FFCB6B',
-    brightBlue: '#82AAFF',
-    brightMagenta: '#C792EA',
-    brightCyan: '#89DDFF',
-    brightWhite: '#ffffff',
-    selectionBackground: '#FAF089',
+const theme = {
+  background: '#131a20',
+  cursor: 'transparent',
+  black: th`colors.black`.toString(),
+  red: '#E54B4B',
+  green: '#9ECE58',
+  yellow: '#FAED70',
+  blue: '#396FE2',
+  magenta: '#BB80B3',
+  cyan: '#2DDAFD',
+  white: '#d0d0d0',
+  brightBlack: 'rgba(255, 255, 255, 0.2)',
+  brightRed: '#FF5370',
+  brightGreen: '#C3E88D',
+  brightYellow: '#FFCB6B',
+  brightBlue: '#82AAFF',
+  brightMagenta: '#C792EA',
+  brightCyan: '#89DDFF',
+  brightWhite: '#ffffff',
+  selection: '#FAF089',
 };
 
 const terminalProps: ITerminalOptions = {
-    disableStdin: true,
-    cursorStyle: 'underline',
-    allowTransparency: true,
-    fontSize: 12,
-    fontFamily: th('fontFamily.mono'),
-    theme: theme,
-    allowProposedApi: true,
-};
-
-const terminalInitOnlyProps: ITerminalInitOnlyOptions = {
-    rows: 30,
+  disableStdin: true,
+  cursorStyle: 'underline',
+  allowTransparency: true,
+  fontSize: 12,
+  fontFamily: th('fontFamily.mono'),
+  rows: 30,
+  theme: theme,
 };
 
 export default () => {
-    const TERMINAL_PRELUDE = '\u001b[1m\u001b[33mcontainer@pterodactyl~ \u001b[0m';
-    const ref = useRef<HTMLDivElement>(null);
-    const terminal = useMemo(() => new Terminal({ ...terminalProps, ...terminalInitOnlyProps }), []);
-    const fitAddon = new FitAddon();
-    const searchAddon = new SearchAddon();
-    const searchBar = new SearchBarAddon({ searchAddon });
-    const webLinksAddon = new WebLinksAddon();
-    const scrollDownHelperAddon = new ScrollDownHelperAddon();
-    const { connected, instance } = ServerContext.useStoreState(state => state.socket);
-    const [canSendCommands] = usePermissions(['control.console']);
-    const serverId = ServerContext.useStoreState(state => state.server.data!.id);
-    const isTransferring = ServerContext.useStoreState(state => state.server.data!.isTransferring);
-    const [history, setHistory] = usePersistedState<string[]>(`${serverId}:command_history`, []);
-    const [historyIndex, setHistoryIndex] = useState(-1);
-    // SearchBarAddon has hardcoded z-index: 999 :(
-    const zIndex = `
-    .xterm-search-bar__addon {
-        z-index: 10;
-    }`;
-
-    const handleConsoleOutput = (line: string, prelude = false) =>
-        terminal.writeln((prelude ? TERMINAL_PRELUDE : '') + line.replace(/(?:\r\n|\r|\n)$/im, '') + '\u001b[0m');
-
-    const handleTransferStatus = (status: string) => {
-        switch (status) {
-            // Sent by either the source or target node if a failure occurs.
-            case 'failure':
-                terminal.writeln(TERMINAL_PRELUDE + 'Transfer has failed.\u001b[0m');
-                return;
-        }
-    };
-
-    const handleDaemonErrorOutput = (line: string) =>
+  const TERMINAL_PRELUDE = '\u001b[1m\u001b[33mMineCube: \u001b[0m';
+  const ref = useRef<HTMLDivElement>(null);
+  const terminal = useMemo(() => new Terminal({ ...terminalProps }), []);
+  const fitAddon = new FitAddon();
+  const searchAddon = new SearchAddon();
+  const searchBar = new SearchBarAddon({ searchAddon });
+  const webLinksAddon = new WebLinksAddon();
+  const scrollDownHelperAddon = new ScrollDownHelperAddon();
+  const { connected, instance } = ServerContext.useStoreState((state) => state.socket);
+  const [canSendCommands] = usePermissions(['control.console']);
+  const serverId = ServerContext.useStoreState((state) => state.server.data!.id);
+  const isTransferring = ServerContext.useStoreState((state) => state.server.data!.isTransferring);
+  const [history, setHistory] = usePersistedState<string[]>(`${serverId}:command_history`, []);
+  const [historyIndex, setHistoryIndex] = useState(-1);
+
+  const handleConsoleOutput = (line: string, prelude = false) =>
+    terminal.writeln((prelude ? TERMINAL_PRELUDE : '') + line.replace(/(?:\r\n|\r|\n)$/im, '') + '\u001b[0m');
+
+  const handleTransferStatus = (status: string) => {
+    switch (status) {
+      // Sent by either the source or target node if a failure occurs.
+      case 'failure':
+        terminal.writeln(TERMINAL_PRELUDE + 'Transfer has failed.\u001b[0m');
+        return;
+
+      // Sent by the source node whenever the server was archived successfully.
+      case 'archive':
         terminal.writeln(
-            TERMINAL_PRELUDE + '\u001b[1m\u001b[41m' + line.replace(/(?:\r\n|\r|\n)$/im, '') + '\u001b[0m',
+          TERMINAL_PRELUDE + 'Server has been archived successfully, attempting connection to target node..\u001b[0m'
         );
-
-    const handlePowerChangeEvent = (state: string) =>
-        terminal.writeln(TERMINAL_PRELUDE + 'Server marked as ' + state + '...\u001b[0m');
-
-    const handleCommandKeyDown = (e: ReactKeyboardEvent<HTMLInputElement>) => {
-        if (e.key === 'ArrowUp') {
-            const newIndex = Math.min(historyIndex + 1, history!.length - 1);
-
-            setHistoryIndex(newIndex);
-            e.currentTarget.value = history![newIndex] || '';
-
-            // By default, up arrow will also bring the cursor to the start of the line,
-            // so we'll preventDefault to keep it at the end.
-            e.preventDefault();
-        }
-
-        if (e.key === 'ArrowDown') {
-            const newIndex = Math.max(historyIndex - 1, -1);
-
-            setHistoryIndex(newIndex);
-            e.currentTarget.value = history![newIndex] || '';
-        }
-
-        const command = e.currentTarget.value;
-        if (e.key === 'Enter' && command.length > 0) {
-            setHistory(prevHistory => [command, ...prevHistory!].slice(0, 32));
-            setHistoryIndex(-1);
-
-            instance && instance.send('send command', command);
-            e.currentTarget.value = '';
+    }
+  };
+
+  const handleDaemonErrorOutput = (line: string) =>
+    terminal.writeln(TERMINAL_PRELUDE + '\u001b[1m\u001b[41m' + line.replace(/(?:\r\n|\r|\n)$/im, '') + '\u001b[0m');
+
+  const handlePowerChangeEvent = (state: string) =>
+    terminal.writeln(TERMINAL_PRELUDE + 'Server marked as ' + state + '...\u001b[0m');
+
+  const handleCommandKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
+    if (e.key === 'ArrowUp') {
+      const newIndex = Math.min(historyIndex + 1, history!.length - 1);
+
+      setHistoryIndex(newIndex);
+      e.currentTarget.value = history![newIndex] || '';
+
+      // By default up arrow will also bring the cursor to the start of the line,
+      // so we'll preventDefault to keep it at the end.
+      e.preventDefault();
+    }
+
+    if (e.key === 'ArrowDown') {
+      const newIndex = Math.max(historyIndex - 1, -1);
+
+      setHistoryIndex(newIndex);
+      e.currentTarget.value = history![newIndex] || '';
+    }
+
+    const command = e.currentTarget.value;
+    if (e.key === 'Enter' && command.length > 0) {
+      setHistory((prevHistory) => [command, ...prevHistory!].slice(0, 32));
+      setHistoryIndex(-1);
+
+      instance && instance.send('send command', command);
+      e.currentTarget.value = '';
+    }
+  };
+
+  useEffect(() => {
+    if (connected && ref.current && !terminal.element) {
+      terminal.loadAddon(fitAddon);
+      terminal.loadAddon(searchAddon);
+      terminal.loadAddon(searchBar);
+      terminal.loadAddon(webLinksAddon);
+      terminal.loadAddon(scrollDownHelperAddon);
+
+      terminal.open(ref.current);
+      fitAddon.fit();
+
+      // Add support for capturing keys
+      terminal.attachCustomKeyEventHandler((e: KeyboardEvent) => {
+        if ((e.ctrlKey || e.metaKey) && e.key === 'c') {
+          document.execCommand('copy');
+          return false;
+        } else if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
+          e.preventDefault();
+          searchBar.show();
+          return false;
+        } else if (e.key === 'Escape') {
+          searchBar.hidden();
         }
+        return true;
+      });
+    }
+  }, [terminal, connected]);
+
+  useEventListener(
+    'resize',
+    debounce(() => {
+      if (terminal.element) {
+        fitAddon.fit();
+      }
+    }, 100)
+  );
+
+  useEffect(() => {
+    const listeners: Record<string, (s: string) => void> = {
+      [SocketEvent.STATUS]: handlePowerChangeEvent,
+      [SocketEvent.CONSOLE_OUTPUT]: handleConsoleOutput,
+      [SocketEvent.INSTALL_OUTPUT]: handleConsoleOutput,
+      [SocketEvent.TRANSFER_LOGS]: handleConsoleOutput,
+      [SocketEvent.TRANSFER_STATUS]: handleTransferStatus,
+      [SocketEvent.DAEMON_MESSAGE]: (line) => handleConsoleOutput(line, true),
+      [SocketEvent.DAEMON_ERROR]: handleDaemonErrorOutput,
     };
 
-    useEffect(() => {
-        if (connected && ref.current && !terminal.element) {
-            terminal.loadAddon(fitAddon);
-            terminal.loadAddon(searchAddon);
-            terminal.loadAddon(searchBar);
-            terminal.loadAddon(webLinksAddon);
-            terminal.loadAddon(scrollDownHelperAddon);
-
-            terminal.open(ref.current);
-            fitAddon.fit();
-            searchBar.addNewStyle(zIndex);
-
-            // Add support for capturing keys
-            terminal.attachCustomKeyEventHandler((e: KeyboardEvent) => {
-                if ((e.ctrlKey || e.metaKey) && e.key === 'c') {
-                    document.execCommand('copy');
-                    return false;
-                } else if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
-                    e.preventDefault();
-                    searchBar.show();
-                    return false;
-                } else if (e.key === 'Escape') {
-                    searchBar.hidden();
-                }
-                return true;
-            });
-        }
-    }, [terminal, connected]);
-
-    useEventListener(
-        'resize',
-        debounce(() => {
-            if (terminal.element) {
-                fitAddon.fit();
-            }
-        }, 100),
-    );
-
-    useEffect(() => {
-        const listeners: Record<string, (s: string) => void> = {
-            [SocketEvent.STATUS]: handlePowerChangeEvent,
-            [SocketEvent.CONSOLE_OUTPUT]: handleConsoleOutput,
-            [SocketEvent.INSTALL_OUTPUT]: handleConsoleOutput,
-            [SocketEvent.TRANSFER_LOGS]: handleConsoleOutput,
-            [SocketEvent.TRANSFER_STATUS]: handleTransferStatus,
-            [SocketEvent.DAEMON_MESSAGE]: line => handleConsoleOutput(line, true),
-            [SocketEvent.DAEMON_ERROR]: handleDaemonErrorOutput,
-        };
-
-        if (connected && instance) {
-            // Do not clear the console if the server is being transferred.
-            if (!isTransferring) {
-                terminal.clear();
-            }
-
-            Object.keys(listeners).forEach((key: string) => {
-                const listener = listeners[key];
-                if (listener === undefined) {
-                    return;
-                }
-
-                instance.addListener(key, listener);
-            });
-            instance.send(SocketRequest.SEND_LOGS);
-        }
-
-        return () => {
-            if (instance) {
-                Object.keys(listeners).forEach((key: string) => {
-                    const listener = listeners[key];
-                    if (listener === undefined) {
-                        return;
-                    }
-
-                    instance.removeListener(key, listener);
-                });
-            }
-        };
-    }, [connected, instance]);
-
-    return (
-        <div className={classNames(styles.terminal, 'relative')}>
-            <SpinnerOverlay visible={!connected} size={'large'} />
-            <div
-                className={classNames(styles.container, styles.overflows_container, { 'rounded-b': !canSendCommands })}
-            >
-                <div className={'h-full'}>
-                    <div id={styles.terminal} ref={ref} />
-                </div>
-            </div>
-            {canSendCommands && (
-                <div className={classNames('relative', styles.overflows_container)}>
-                    <input
-                        className={classNames('peer', styles.command_input)}
-                        type={'text'}
-                        placeholder={'Type a command...'}
-                        aria-label={'Console command input.'}
-                        disabled={!instance || !connected}
-                        onKeyDown={handleCommandKeyDown}
-                        autoCorrect={'off'}
-                        autoCapitalize={'none'}
-                    />
-                    <div
-                        className={classNames(
-                            'text-slate-100 peer-focus:animate-pulse peer-focus:text-slate-50',
-                            styles.command_icon,
-                        )}
-                    >
-                        <ChevronDoubleRightIcon className={'h-4 w-4'} />
-                    </div>
-                </div>
+    if (connected && instance) {
+      // Do not clear the console if the server is being transferred.
+      if (!isTransferring) {
+        terminal.clear();
+      }
+
+      Object.keys(listeners).forEach((key: string) => {
+        instance.addListener(key, listeners[key]);
+      });
+      instance.send(SocketRequest.SEND_LOGS);
+    }
+
+    return () => {
+      if (instance) {
+        Object.keys(listeners).forEach((key: string) => {
+          instance.removeListener(key, listeners[key]);
+        });
+      }
+    };
+  }, [connected, instance]);
+
+  return (
+    <div className={classNames(styles.terminal, 'relative')}>
+      <SpinnerOverlay visible={!connected} size={'large'} />
+      {/* Apply the border color here */}
+      <div className={classNames(styles.container, 'rounded-b', styles.overflows_container)} style={{ borderColor: '#080614' }}>
+        <div className={'h-full'}>
+          <div id={styles.terminal} ref={ref} />
+        </div>
+      </div>
+      {canSendCommands && (
+        <div className={classNames('relative', styles.overflows_container)}>
+          <input
+            className={classNames('peer', styles.command_input)}
+            type={'text'}
+            placeholder={'Type a command...'}
+            aria-label={'Console command input.'}
+            disabled={!instance || !connected}
+            onKeyDown={handleCommandKeyDown}
+            autoCorrect={'off'}
+            autoCapitalize={'none'}
+          />
+          <div
+            className={classNames(
+              'text-gray-100 peer-focus:text-gray-50 peer-focus:animate-pulse',
+              styles.command_icon
             )}
+          >
+            <ChevronDoubleRightIcon className={'w-4 h-4'} />
+          </div>
         </div>
-    );
+      )}
+    </div>
+  );
 };
diff --git a/resources/scripts/index.tsx b/resources/scripts/index.tsx
index 99fd50d37..227508e76 100644
--- a/resources/scripts/index.tsx
+++ b/resources/scripts/index.tsx
@@ -1,7 +1,17 @@
-import { createRoot } from 'react-dom/client';
-import { App } from '@/components/App';
+import React from 'react';
+import ReactDOM from 'react-dom';
+import App from '@/components/App';
+import { setConfig } from 'react-hot-loader';
+import './MineCube.css';
 
 // Enable language support.
 import './i18n';
 
-createRoot(document.getElementById('app')!).render(<App />);
+// Prevents page reloads while making component changes which
+// also avoids triggering constant loading indicators all over
+// the place in development.
+//
+// @see https://github.com/gaearon/react-hot-loader#hook-support
+setConfig({ reloadHooks: false });
+
+ReactDOM.render(<App />, document.getElementById('app'));
diff --git a/resources/scripts/routers/ServerRouter.tsx b/resources/scripts/routers/ServerRouter.tsx
index e3c91b64d..70427dfdb 100644
--- a/resources/scripts/routers/ServerRouter.tsx
+++ b/resources/scripts/routers/ServerRouter.tsx
@@ -1,9 +1,10 @@
-import TransferListener from '@/components/server/TransferListener';
-import { Fragment, useEffect, useState } from 'react';
-import { NavLink, Route, Routes, useParams } from 'react-router-dom';
+import React, { useEffect, useState } from 'react';
+import { NavLink, Route, Switch, useRouteMatch } from 'react-router-dom';
 import NavigationBar from '@/components/NavigationBar';
+import TransitionRouter from '@/TransitionRouter';
 import WebsocketHandler from '@/components/server/WebsocketHandler';
 import { ServerContext } from '@/state/server';
+import { CSSTransition } from 'react-transition-group';
 import Can from '@/components/elements/Can';
 import Spinner from '@/components/elements/Spinner';
 import { NotFound, ServerError } from '@/components/elements/ScreenBlock';
@@ -11,6 +12,7 @@ import { httpErrorToHuman } from '@/api/http';
 import { useStoreState } from 'easy-peasy';
 import SubNavigation from '@/components/elements/SubNavigation';
 import InstallListener from '@/components/server/InstallListener';
+import TransferListener from '@/components/server/TransferListener'; // Add TransferListener component
 import ErrorBoundary from '@/components/elements/ErrorBoundary';
 import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
 import { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';
@@ -19,113 +21,178 @@ import ConflictStateRenderer from '@/components/server/ConflictStateRenderer';
 import PermissionRoute from '@/components/elements/PermissionRoute';
 import routes from '@/routers/routes';
 
-function ServerRouter() {
-    const params = useParams<'id'>();
-    const location = useLocation();
+// Import Font Awesome icons that you want to use
+import {
+  faCogs,
+  faDatabase,
+  faUserFriends,
+  faFileAlt,
+  faGlobe,
+  faBuilding,
+  faReply,
+  faServer,
+  faClock,
+  faThLarge,
+  faRocket,
+  faTerminal,
+} from '@fortawesome/free-solid-svg-icons';
+export default () => {
+  const match = useRouteMatch<{ id: string }>();
+  const location = useLocation();
 
-    const rootAdmin = useStoreState(state => state.user.data!.rootAdmin);
-    const [error, setError] = useState('');
+  const rootAdmin = useStoreState((state) => state.user.data!.rootAdmin);
+  const [error, setError] = useState('');
 
-    const id = ServerContext.useStoreState(state => state.server.data?.id);
-    const uuid = ServerContext.useStoreState(state => state.server.data?.uuid);
-    const inConflictState = ServerContext.useStoreState(state => state.server.inConflictState);
-    const serverId = ServerContext.useStoreState(state => state.server.data?.internalId);
-    const getServer = ServerContext.useStoreActions(actions => actions.server.getServer);
-    const clearServerState = ServerContext.useStoreActions(actions => actions.clearServerState);
+  const id = ServerContext.useStoreState((state) => state.server.data?.id);
+  const uuid = ServerContext.useStoreState((state) => state.server.data?.uuid);
+  const inConflictState = ServerContext.useStoreState((state) => state.server.inConflictState);
+  const serverId = ServerContext.useStoreState((state) => state.server.data?.internalId);
+  const getServer = ServerContext.useStoreActions((actions) => actions.server.getServer);
+  const clearServerState = ServerContext.useStoreActions((actions) => actions.clearServerState);
 
-    useEffect(
-        () => () => {
-            clearServerState();
-        },
-        [],
-    );
+  const to = (value: string, url = false) => {
+    if (value === '/') {
+      return url ? match.url : match.path;
+    }
+    return `${(url ? match.url : match.path).replace(/\/*$/, '')}/${value.replace(/^\/+/, '')}`;
+  };
 
-    useEffect(() => {
-        setError('');
+  useEffect(() => {
+    setError('');
 
-        if (params.id === undefined) {
-            return;
-        }
+    getServer(match.params.id).catch((error) => {
+      console.error(error);
+      setError(httpErrorToHuman(error));
+    });
 
-        getServer(params.id).catch(error => {
-            console.error(error);
-            setError(httpErrorToHuman(error));
-        });
+    return () => {
+      clearServerState();
+    };
+  }, [match.params.id]);
 
-        return () => {
-            clearServerState();
-        };
-    }, [params.id]);
-
-    return (
-        <Fragment key={'server-router'}>
-            <NavigationBar />
-            {!uuid || !id ? (
-                error ? (
-                    <ServerError message={error} />
-                ) : (
-                    <Spinner size="large" centered />
-                )
-            ) : (
-                <>
-                    <SubNavigation>
-                        <div>
-                            {routes.server
-                                .filter(route => route.path !== undefined)
-                                .map(route =>
-                                    route.permission ? (
-                                        <Can key={route.path} action={route.permission} matchAny>
-                                            <NavLink to={`/server/${id}/${route.path ?? ''}`.replace(/\/$/, '')} end>
-                                                {route.name}
-                                            </NavLink>
-                                        </Can>
-                                    ) : (
-                                        <NavLink
-                                            key={route.path}
-                                            to={`/server/${id}/${route.path ?? ''}`.replace(/\/$/, '')}
-                                            end
-                                        >
-                                            {route.name}
-                                        </NavLink>
-                                    ),
-                                )}
-                            {rootAdmin && (
-                                <NavLink to={`/admin/servers/${serverId}`}>
-                                    <FontAwesomeIcon icon={faExternalLinkAlt} />
-                                </NavLink>
-                            )}
-                        </div>
-                    </SubNavigation>
-                    <InstallListener />
-                    <TransferListener />
-                    <WebsocketHandler />
-                    {inConflictState && (!rootAdmin || (rootAdmin && !location.pathname.endsWith(`/server/${id}/`))) ? (
-                        <ConflictStateRenderer />
+  return (
+    <React.Fragment key={'server-router'}>
+      <NavigationBar />
+      {!uuid || !id ? (
+        error ? (
+          <ServerError message={error} />
+        ) : (
+          <Spinner size={'large'} centered />
+        )
+      ) : (
+        <>
+          <CSSTransition timeout={150} classNames={'fade'} appear in>
+            <SubNavigation>
+              <div>
+                {routes.server
+                  .filter((route) => !!route.name)
+                  .map((route) =>
+                    route.permission ? (
+                      <Can key={route.path} action={route.permission} matchAny>
+                        <NavLink to={to(route.path, true)} exact={route.exact}>
+                          {/* Use the FontAwesome icon as follows */}
+                          {route.name === 'Console' && (
+                            <>
+                              <FontAwesomeIcon icon={faTerminal} />  Console
+                            </>
+                          )}
+                          {route.name === 'Settings' && (
+                            <>
+                              <FontAwesomeIcon icon={faCogs} />  Settings
+                            </>
+                          )}
+                          {route.name === 'Databases' && (
+                            <>
+                              <FontAwesomeIcon icon={faDatabase} />  Databases
+                            </>
+                          )}
+                          {route.name === 'Users' && (
+                            <>
+                              <FontAwesomeIcon icon={faUserFriends} />  Users
+                            </>
+                          )}
+                          {route.name === 'Files' && (
+                            <>
+                              <FontAwesomeIcon icon={faFileAlt} />  Files
+                            </>
+                          )}
+                          {route.name === 'Network' && (
+                            <>
+                              <FontAwesomeIcon icon={faGlobe} />  Network
+                            </>
+                          )}
+                          {route.name === 'Allocation' && (
+                            <>
+                              <FontAwesomeIcon icon={faBuilding} />  Allocation
+                            </>
+                          )}
+                          {route.name === 'Backups' && (
+                            <>
+                              <FontAwesomeIcon icon={faReply} />  Backups
+                            </>
+                          )}
+                          {route.name === 'Server Details' && (
+                            <>
+                              <FontAwesomeIcon icon={faServer} />  Server Details
+                            </>
+                          )}
+                          {route.name === 'Schedules' && (
+                            <>
+                              <FontAwesomeIcon icon={faThLarge} />  Schedules
+                            </>
+                          )}
+                         {route.name === 'Startup' && (
+                            <>
+                              <FontAwesomeIcon icon={faRocket} />  Startup
+                            </>
+                          )}
+                          {route.name === 'Activity' && (
+                            <>
+                              <FontAwesomeIcon icon={faClock} />  Activity
+                            </>
+                          )}
+                          {/* Add more conditions for other icons */}
+                        </NavLink>
+                      </Can>
                     ) : (
-                        <ErrorBoundary>
-                            <Routes location={location}>
-                                {routes.server.map(({ route, permission, component: Component }) => (
-                                    <Route
-                                        key={route}
-                                        path={route}
-                                        element={
-                                            <PermissionRoute permission={permission}>
-                                                <Spinner.Suspense>
-                                                    <Component />
-                                                </Spinner.Suspense>
-                                            </PermissionRoute>
-                                        }
-                                    />
-                                ))}
-
-                                <Route path="*" element={<NotFound />} />
-                            </Routes>
-                        </ErrorBoundary>
-                    )}
-                </>
-            )}
-        </Fragment>
-    );
-}
-
-export default ServerRouter;
+                      <NavLink key={route.path} to={to(route.path, true)} exact={route.exact}>
+                        {/* Add a space between the route name and the icon */}
+                        {route.name}
+                      </NavLink>
+                    )
+                  )}
+                {rootAdmin && (
+                  // eslint-disable-next-line react/jsx-no-target-blank
+                  <a href={`/admin/servers/view/${serverId}`} target={'_blank'}>
+                    <FontAwesomeIcon icon={faExternalLinkAlt} />
+                  </a>
+                )}
+              </div>
+            </SubNavigation>
+          </CSSTransition>
+          <InstallListener />
+          <TransferListener />
+          <WebsocketHandler />
+          {inConflictState && (!rootAdmin || (rootAdmin && !location.pathname.endsWith(`/server/${id}`))) ? (
+            <ConflictStateRenderer />
+          ) : (
+            <ErrorBoundary>
+              <TransitionRouter>
+                <Switch location={location}>
+                  {routes.server.map(({ path, permission, component: Component }) => (
+                    <PermissionRoute key={path} permission={permission} path={to(path)} exact>
+                      <Spinner.Suspense>
+                        <Component />
+                      </Spinner.Suspense>
+                    </PermissionRoute>
+                  ))}
+                  <Route path={'*'} component={NotFound} />
+                </Switch>
+              </TransitionRouter>
+            </ErrorBoundary>
+          )}
+        </>
+      )}
+    </React.Fragment>
+  );
+};
diff --git a/resources/views/admin b/resources/views/admin
new file mode 100644
index 000000000..b77340bfc
--- /dev/null
+++ b/resources/views/admin
@@ -0,0 +1,43 @@
+@extends('layouts.admin')
+
+@section('title')
+    Administration
+@endsection
+
+@section('content-header')
+    <h1>Administrative Overview<small>A quick glance at your system.</small></h1>
+    <ol class="breadcrumb">
+        <li><a href="{{ route('admin.index') }}">Admin</a></li>
+        <li class="active">Index</li>
+    </ol>
+@endsection
+
+@section('content')
+<div class="row">
+    <div class="col-xs-12">
+        <div class="box
+            @if($version->isLatestPanel())
+                box-success
+            @else
+                box-danger
+            @endif
+        ">
+            <div class="box-header with-border">
+                <h3 class="box-title">System Information</h3>
+            </div>
+            <div class="box-body">
+                @if ($version->isLatestPanel())
+                    You are running Pterodactyl Panel version <code>{{ config('app.version') }}</code>. Your panel is up-to-date! | You are using MineCube Theme Version <code>4.0</code>
+                @else
+                    Your panel is <strong>not up-to-date!</strong> The latest version is <a href="https://github.com/Pterodactyl/Panel/releases/v{{ $version->getPanel() }}" target="_blank"><code>{{ $version->getPanel() }}</code></a> and you are currently running version <code>{{ config('app.version') }}</code>.
+                @endif
+            </div>
+        </div>
+    </div>
+</div>
+<div class="row">
+    <div class="col-xs-6 col-sm-3 text-center">
+        <a href="https://discord.gg/WvzNPpKr"><button class="btn btn-success" style="width:100%;"><i class="fa fa-fw fa-support"></i>Theme Support</button></a>
+    </div>
+</div>
+@endsection
-- 
2.39.3 (Apple Git-145)

